#!/usr/bin/env lua
--[[--------------------------------------------------------------------------
 *  Copyright (c) 2014 Lawrence Livermore National Security, LLC.  Produced at
 *  the Lawrence Livermore National Laboratory (cf, AUTHORS, DISCLAIMER.LLNS).
 *  LLNL-CODE-658032 All rights reserved.
 *
 *  This file is part of the Flux resource manager framework.
 *  For details, see https://github.com/flux-framework.
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the license, or (at your option)
 *  any later version.
 *
 *  Flux is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the terms and conditions of the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *  See also:  http://www.gnu.org/licenses/
 ---------------------------------------------------------------------------]]
 --
 -- flux-ps: simple frontend for `cmb.processes` service
 --
-------------------------------------------------------------------------------
-- Modules:
-------------------------------------------------------------------------------
local flux = require 'flux'
local posix = require 'flux.posix'
local hostlist = require 'flux.hostlist'

local prog = string.match (arg[0], "([^/]+)$")
local shortprog = prog:match ("flux%-(.+)$")
local verbose = false

local usage =
[[
Usage: %s [OPTIONS]

List subprocesses managed by flux-broker.

 -h, --help           Display this message
 -v, --verbose        Be verbose.
 -r, --rank=RANKS     Target only ranks in list RANKS

]]


--
-- Termination state needs to remain a global for access from
--  signal handler functions. See setup_signal_handlers() below.
--
terminate = false

-------------------------------------------------------------------------------
-- Local functions:
-------------------------------------------------------------------------------
--
--
local function say (fmt, ...)
    if not verbose then return end
    io.stderr:write (string.format ("%s: "..fmt, shortprog, ...))
end

local function warn (fmt, ...)
    io.stderr:write (string.format ("%s: "..fmt, shortprog, ...))
end

local function die (fmt, ...)
    io.stderr:write (string.format ("%s: "..fmt, shortprog, ...))
    os.exit (1)
end

local function display_usage ()
    io.stdout:write (string.format (usage, prog))
    os.exit (0)
end

local function get_ranklist (f, r)
    if r == "all" or not r then r = '0-'..f.size-1 end
    return hostlist.new ('['..r..']')
end

local header = "OWNER     RANK       PID  COMMAND"
local fmt    = "%-5.5s %8d %9d  %s"
local function print_process_info (procs)
    print (header)
    for _,p in pairs (procs) do
        print (fmt:format (p.sender or "none", p.rank, p.pid, p.cmdline[1]))
    end
end
-------------------------------------------------------------------------------
-- Main program:
-------------------------------------------------------------------------------
--  Parse cmdline args:
--
local getopt = require 'flux.alt_getopt' .get_opts
local opts, optind = getopt (arg, "r:vh",
                        { rank = "r", verbose = "v", help = "h" })

if opts.h then display_usage () end
if opts.v then verbose = true end

--  Create new local broker connection
--
local f, err = flux.new()
if not f then die ("Connecting to flux failed: %s\n", err) end

local ranks = get_ranklist (f, opts.r)
local procs = {}
local size = #ranks
local count = 0

--  Set up msghandler for process listing responses
--
local mh, err = f:msghandler {
    pattern = "*.processes",
    msgtypes = { flux.MSGTYPE_RESPONSE },

    handler = function (f, msg, mh)
        if msg.errnum ~= 0 then
            warn ("Error: %s\n", posix.errno (msg.errnum))
            size = size - 1
        elseif not msg.data then 
            warn ("Error: empty message!\n")
            size = size - 1
        else
            local resp = msg.data
            local rank = resp.rank
            for _,p in pairs (resp.procs) do
                p.rank = rank
                table.insert (procs, p)
            end
        end
        count = count + 1
        if count == size then f:reactor_stop() end
    end

}

--  Send requests to configured ranks
--
for i in ranks:next() do
    local matchtag, err = f:send ("cmb.processes", {}, i )
    if not matchtag then error (err) end
end

--  Begin reactor loop:
--
local r = f:reactor()

print_process_info (procs)

-- vi: ts=4 sw=4 expandtab
