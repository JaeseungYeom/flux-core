#!/usr/bin/env lua

-------------------------------------------------------------------------------
-- Modules:
-------------------------------------------------------------------------------
local flux = require 'flux'
local decode = require 'flux.base64' .decode
local encode = require 'flux.base64' .encode
local posix = require 'flux.posix'
local timer = require 'flux.timer'
local hostlist = require 'flux.hostlist'

local prog = string.match (arg[0], "([^/]+)$")
local shortprog = prog:match ("flux%-(.+)$")
local verbose = false


--
-- Termination state needs to remain a global for access from
--  signal handler functions. See setup_signal_handlers() below.
--
terminate = false

-------------------------------------------------------------------------------
-- Local functions:
-------------------------------------------------------------------------------
--
--
local function say (fmt, ...)
    if not verbose then return end
    io.stderr:write (string.format ("%s: "..fmt, shortprog, ...))
end

local function warn (fmt, ...)
    io.stderr:write (string.format ("%s: "..fmt, shortprog, ...))
end

local function die (fmt, ...)
    io.stderr:write (string.format ("%s: "..fmt, shortprog, ...))
    os.exit (1)
end

local function program_state_create (f, n)
    local f = f
    local s = {
        size = n or 1,
        nexited = 0,
        nstarted = 0,
        nclosed = { stdout = 0, stderr = 0 },
        running = {},
        status = {},
        code = {},
        matchtag = {},
    }
    local T = {}

    local function write (data)
        if data.data then data.data = encode (data.data) end
        for rank,pid in pairs(s.running) do
            f:send ("cmb.exec.write", { pid = pid, stdin = data }, rank)
        end
    end

    local function activate_stdin ()
        f:iowatcher {
         fd = posix.fileno (io.input()),
            handler = function (iow, data)
                write (data)
            end
        }
    end

    function increment_nstarted ()
        s.nstarted = s.nstarted + 1
        if s.nstarted == s.size then
            activate_stdin ()
        end
    end


    function T.size (n)
        if n then s.size = n end
        return s.size
    end
    function T.matchtag (mt, rank)
        if rank then
            s.matchtag [mt] = rank
            return rank
        else
            return s.matchtag [mt]
        end
    end
    function T.exited (resp)
        s.nexited = s.nexited + 1
        s.code [resp.rank] = resp.code
        s.status [resp.rank] = resp.status
    end
    function T.started (rank, pid)
        increment_nstarted ()
        s.running [rank] = pid
    end
    function T.killall (f, signum)
        say ("sending signal %d to %d running processes\n",
            signum, s.nstarted - s.nexited)
        for rank,pid in pairs (s.running) do
            local mt, err = f:send ("cmb.exec.signal",
                { pid = pid, signum = signum },
                rank)
            if not mt then say ("failed to signal rank %d: %s\n", rank, err) end
        end
    end
    function T.failed (rank, errnum)
        increment_nstarted ()
        s.nexited = s.nexited + 1
        s.nclosed.stdout = s.nclosed.stdout + 1
        s.nclosed.stderr = s.nclosed.stderr + 1
        s.code [rank] = 68 -- EX_NOHOST
        s.status [rank] = 68
    end
    function T.eof (rank, name)
        s.nclosed [name] = s.nclosed [name] + 1
    end
    function T.complete ()
        if s.nexited == s.size and
           s.nclosed.stdout == s.size and
           s.nclosed.stderr == s.size then 
            return true
        end
        return false
    end
    function T.status (rank)
        if rank then return s.status [rank] end
        local rv = 0
        for k,v in pairs (s.status) do
            if v > rv then rv = v end
        end
        return rv
    end
    function T.exit_code (rank)
        if rank then return s.code [rank] end
        local rv = 0
        for k,v in pairs (s.code) do
            if v > rv then rv = v end
        end
        return rv
    end
    return T
end

local function get_ranklist (f, r)
    if r == "all" or not r then r = '0-'..f.size-1 end
    return hostlist.new ('['..r..']')
end

-------------------------------------------------------------------------------
-- Main program:
-------------------------------------------------------------------------------
--  Parse cmdline args:
--
local getopt = require 'flux.alt_getopt' .get_opts
local opts, optind = getopt (arg, "d:r:vln",
                        { rank = "r", verbose = "v", dir = "d", labelio = "l",
                          noinput = 'n' })

if opts.v then verbose = true end
if opts.n then io.input ("/dev/null") end
if not arg[optind] then die ("Command to run required\n") end
local cmdline = {}
for i = optind, #arg do
    table.insert (cmdline, arg[i])
end

local sigtimer

-- Start in-program timer:
local tt = timer.new()
local t = timer.new()

--  Create new connection to local cmbd:
--
local f, err = flux.new()
if not f then die ("Connecting to flux failed: %s\n", err) end

local ranks = get_ranklist (f, opts.r)
local state = program_state_create (f, #ranks)


--  Set up msghandler for exec responses
--
local mh, err = f:msghandler {
    pattern = "*.exec",
    msgtypes = { flux.MSGTYPE_RESPONSE },

    handler = function (f, zmsg, mh)
        if zmsg.errnum ~= 0 then
            local rank = state.matchtag (zmsg.matchtag)
            warn ("Error: rank %d: %s\n", rank, posix.errno (zmsg.errnum))
            state.failed (rank, zmsg.errnum)
            if state.complete() then
                f:reactor_stop ()
            end
            return
        end

        local resp = zmsg.data
        if not resp then return end
        --say ("%03fms: rank %d %s\n", t:get0() * 1000, resp.rank or -1, resp.state or "error")
        --
        if resp.type == "io" then
            local dst = resp.name == "stdout" and io.stdout or io.stderr
            if resp.data then
                local lines = decode (resp.data)
                if opts.l then
                    lines:gsub ('([^\n]+\n?)', function (s)
                            dst:write (resp.rank..": "..s)
                        end)
                else
                    dst:write (lines)
                end
            end
            if resp.eof then
                state.eof (resp.rank, resp.name)
                --io.close (dst)
                if state.complete() then f:reactor_stop () end
            end
        elseif resp.state == "Running" then
            state.started (resp.rank, resp.pid)
        elseif resp.state == "Exited" or resp.state == "Exec Failure" then
            if resp.state == "Exec Failure" then
                warn ("Error: rank %d: %s\n",
                    resp.rank, posix.errno (resp.exec_errno))
            end
            state.exited (resp)
            if state.complete() then
                f:reactor_stop ()
            end
        else
            warn ("got unexpected msg!\n")
        end
    end

}

local s, err = f:sighandler {
    sigmask = { posix.SIGINT, posix.SIGTERM },
    handler = function (f, s, sig)
        terminate = true
        state.killall (f, sig)
        f:reactor_stop()
    end
}


--  Begin reactor loop:
--
local sigtimer = nil

t:set()
say ("%03fms: Starting %s on %s\n", t:get0() * 1000, cmdline[1], tostring(ranks))

local env = posix.getenv()

local cwd = opts.d or posix.getcwd()

local msg = {
    cmdline = cmdline,
    env = env,
    cwd = cwd
}

for i in ranks:next() do
    local matchtag, err = f:send ("cmb.exec", msg, i )
    if not matchtag then error (err) end
    state.matchtag (matchtag, i)
end
say ("%03fms: Sent all requests\n", t:get0() * 1000)

repeat
    local r = f:reactor()
    if not terminate then break end
    --
    --  If we catch a signal then lwj:watch() will be interrupted.
    --   Check to see if we should terminate the job now:
    --
    if not sigtimer then
        sigtimer = timer.new()
        sigtimer:get()
    elseif sigtimer:get() < 1.0 then
        say ("Detaching from job. Processes may still be running\n");
        os.exit (0);
    end
    terminate = false
until false

say ("%03fms: %d tasks complete with code %d\n", t:get0() * 1000, state.size(), state.exit_code())
os.exit (state.exit_code())

-- vi: ts=4 sw=4 expandtab
