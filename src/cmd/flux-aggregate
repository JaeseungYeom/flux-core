#!/usr/bin/env lua

-------------------------------------------------------------
-- Copyright 2014 Lawrence Livermore National Security, LLC
-- (c.f. AUTHORS, NOTICE.LLNS, COPYING)
--
-- This file is part of the Flux resource manager framework.
-- For details, see https://github.com/flux-framework.
--
-- SPDX-License-Identifier: LGPL-3.0
-------------------------------------------------------------

 --
 -- flux-aggregate: test aggregator module
 --
local flux = require 'flux'
local timer = require 'flux.timer'
local getopt = require 'flux.alt_getopt'.get_opts

local prog = string.match (arg[0], "([^/]+)$")
local shortprog = prog:match ("flux%-(.+)$")

local function printf (...)
    io.stdout:write (string.format (...))
end

local function die (...)
    io.stderr:write (prog..": " .. string.format (...))
    os.exit (1)
end

local function l_tostring (o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. l_tostring (v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

---
-- Synchronously subscribe to topic on flux handle f
--
local function synchronous_subscribe (f, topic)
    f:subscribe (topic)
    f:sendevent (topic .. ".test")
    local msg, t = f:recv_event ()
    if not msg or t ~= topic..".test" then
        die ("error waiting for event subscribe: %s\n", t)
    end
end

--
--  parse options, get key and value
--
local opts, optind = getopt (arg, "ht:c:e:",
                             { help = "h",
                               timeout = "t",
                               count = "c",
                               execute = "e" })
local key = arg[optind]
local value = nil

if opts.e then
    local fn, err = loadstring ("return "..opts.e)
    if not fn then
        die ("Failed to parse argument to -e, --execute: %s\n", err)
    end
    value = fn ()
else
    value = tonumber (arg[optind+1]) or arg[optind+1]
end

if opts.h then
    printf ("Usage: %s [OPTIONS] KEY VALUE\n", prog)
    printf (" -h, --help         Display this message.\n")
    printf (" -t, --timeout=T    Set reduction timeout to T seconds.\n")
    printf (" -c, --fwd-count=N  Forward aggregate upstream after N.\n")
    printf (" -e, --execute=CODE Execute Lua code to get value.\n")
    os.exit (0)
end

if not key or not value then
    die ("Usage: %s [OPTIONS] KEY VALUE\n", prog)
end


io.stdout:setvbuf ('line')

local tt
local f, err = flux.new ()
if not f then die ("flux_open: %s\n", err) end

-- 
-- rank 0: Watch for result in KVS
--
if tonumber (f.rank) == 0 then
  -- unlink target, then install watcher
  -- Ignore `.` which is special case for testing
  if key ~= "." then
      f:kvs_unlink (key)
      f:kvs_commit ()
  end

  local topic = "aggregator.abort."..key
  tt = timer.new ()
  synchronous_subscribe (f, topic)
  printf ("%s: synchronous subscribe took %.3fms\n", shortprog, 1000*tt:get0 ())

  tt = timer.new ()
  local mw, err = f:msghandler {
      pattern = "aggregator.abort." .. key,
      msgtypes = { flux.MSGTYPE_EVENT },
      handler = function (f, msg, mh)
        die ("aggregate to `%s` aborted!\n", key)
      end
  }
  if not mw then die (err) end

  local kw, err = f:kvswatcher {
    key = key,
    isdir = (f:kvs_type (key) == "dir"), -- mainly for testing
    handler = function (kw, result)
        if result and not kw.isdir and result.total == result.count then
            for ids,value in pairs (result.entries) do
              printf ("%s: %s\n", ids, l_tostring (value))
            end
            f:reactor_stop ()
        end
    end
  }
  if not kw then error (err) end
  printf ("%s: rank 0 setup took %.3fms\n", shortprog, 1000*tt:get0 ())
end

tt = timer.new ()
local rc, err = f:barrier (key, f.size)
if not rc then die ("barrier: %s\n", err) end
if f.rank == 0 then
    printf ("%s: barrier took %.3fs\n", shortprog, tt:get0 ())
end

tt = timer.new ()
local resp, err= f:rpc ("aggregator.push", {
  key = key,
  total = tonumber (f.size),
  timeout = tonumber (opts.t),
  fwd_count = tonumber (opts.c),
  entries = {
      [tostring (f.rank)] = value,
  }
})

if not resp then error(err) end

if f.rank == 0 then
    printf ("%s: push took %.3fms\n", shortprog, tt:get0() * 1000)
    local tt = timer.new ()
    local r, err = f:reactor ()
    if not r then error (err) end
    printf ("%s: Took %.3fs\n", shortprog, tt:get0())
end

-- vi: ts=4 sw=4 expandtab
